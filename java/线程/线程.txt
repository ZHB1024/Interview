


https://www.cnblogs.com/GarfieldEr007/p/5746362.html



//----------------extends Thread-----------------------------------------------    	
        Message message = new Message("message");
        MessageLock messageLock = new MessageLock("messageLock");
        
        SmsThread smsThread = new SmsThread(message,messageLock);
        MailThread mailThread = new MailThread(message,messageLock);
        
        smsThread.start();
        mailThread.start();
		
		
        
//----------------implements Runnable----------------------------------------------- 
        HandleRunnable handleRunnable = new HandleRunnable("runnable111");
        Thread thread1 = new Thread(handleRunnable);
        Thread thread2 = new Thread(handleRunnable);
        thread1.start();
        thread2.start();
        
public class HandleRunnable implements Runnable {

	private String name;

	public HandleRunnable(String name) {
		this.name = "thread" + name;
	}

	@Override
	public void run() {
		System.out.println(name + " Start. Time = " + new Date());
		processCommand();
		System.out.println(name + " End. Time = " + new Date());
	}

	private void processCommand() {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	@Override
	public String toString() {
		return this.name;
	}

}



        
//----------------ExecutorService Future---------------------------------------
        int taskSize = 5;
        List<Future> results = new ArrayList<>();
        
        ExecutorService executorService = Executors.newFixedThreadPool(taskSize);
        for (int i = 0; i < taskSize; i++) {  
            Callable c = new SubmitCallable(i + " ");  
            // 执行任务并获取Future对象  
            Future f = executorService.submit(c);  
            results.add(f);  
        }  
        
        // 关闭线程池  
        executorService.shutdown();  
  
        // 获取所有并发任务的运行结果  
        for (Future f : results) {  
            // 从Future对象上获取任务的返回值，并输出到控制台  
            System.out.println(">>>" + f.get().toString());  
        }  
		
public class SubmitCallable implements Callable<Object> {
	
	private String taskNum;
	
	public SubmitCallable(String taskNum) {  
        this.taskNum = taskNum;  
    }  

	@Override
	public Object call() throws Exception {
		System.out.println(">>>" + taskNum + "任务启动");  
        Date dateTmp1 = new Date();  
        Thread.sleep(1000);  
        Date dateTmp2 = new Date();  
        long time = dateTmp2.getTime() - dateTmp1.getTime();  
        System.out.println(">>>" + taskNum + "任务终止");  
        return taskNum + "任务返回运行结果,当前任务时间【" + time + "毫秒】";  
	}

}