
https://blog.csdn.net/evankaka/article/details/51866242

锁其实分成非常多。比如有互斥锁、读写锁、乐观锁、悲观锁、自旋锁、公平锁、非公平锁等。包括信号量其实都可以认为是一个锁。


锁提供了两种主要特性：互斥、可见性。
互斥：锁被一个线程所持有时，其他线程就不能持有，排他性。原子性。
可见性：一个线程持有锁，对共享资源做了操作，其他线程是对修改的共享资源是可见的。

synchronized、lock、volatile、CAS（atomicInteger）

synchronized 是一种独占锁，悲观锁，一个线程占有某个资源，其他需要此资源的线程都得挂起，等待持有此资源的线程释放锁，因而产生阻塞。

CAS（compare and swap） 是一种乐观锁，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。
借助JNI（java本地方法），利用硬件并发的性能，原子指令（原语）对内存执行读-改-写操作，使得java程序越过JVM直接调用本地方法提供了一种便捷的方式，因而java在并发的手段上也多了起来。
包含三个操作数：内存位置V、预期原值A、新值B。
如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值 。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该 位置的值。
（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前 值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；
否则，不要更改该位置，只告诉我这个位置现在的值即可。
存在的问题：
ABA的问题，因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，
但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。
AtomicStampedReference解决ABA问题
循环时间长开销大的问题。
只能保证一个共享变量的原子操作的问题。对变量进行合并，AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。


volatile ，它具有可见性，而非原子性。一个线程操作共享资源，其他线程立即可见此修改后的资源。


