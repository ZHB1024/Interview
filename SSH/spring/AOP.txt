

https://www.cnblogs.com/best/p/5679656.html

AOP（Aspect-Oriented Programming，面向切面编程）是一种编程思想，并不是一种具体的实现，谈到实现一般有Filter和代理模式两种常见的使用方式，
spring中的AOP也是封装代理模式完成的，可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。
OOP利用封装、继承和多态把一切事物打造成对象结构，但是对于所有对象中都存在的一些公共行为，
OOP就显得无能为力，也就是说OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。抽象和接口虽好，
但对所有不相干的对象建立共同的接口或父类未免有些生硬，例如日志功能，日志代码几乎散布在所有的对象层次中，
而它和散布到对象的核心功能毫无关系，对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。
因此，为减少这种大量的重复代码，面向切面技术诞生了

1.切面(Aspect)：切面就是一个关注点的模块化，如事务管理、日志管理、权限管理等；
2.连接点(Joinpoint)：程序执行时的某个特定的点，在Spring中就是一个方法的执行；
3.通知(Advice)：通知就是在切面的某个连接点上执行的操作，也就是事务管理、日志管理等；
4.切入点(Pointcut)：切入点就是描述某一类选定的连接点，也就是指定某一类要织入通知的方法；
5.目标对象(Target)：就是被AOP动态代理的目标对象；