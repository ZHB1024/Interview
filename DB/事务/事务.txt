
https://www.jianshu.com/p/bcc614524024

MySQL 事务（Database Transaction）
是指作为单个逻辑工作单元执行的一系列操作，要么完全执行，要么完全地不执行。

ACID
原子性（Atomicity）
原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚。

一致性（Consistency）
一致性是指事务必须使数据库从一个一致的状态变到另外一个一致的状态，
也就是执行事务之前和之后的状态都必须处于一致的状态。

隔离性(Isolation)
隔离性是指当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，
不能被其他事务的操作所干扰，多个并发事务之间要相互隔离

持久性(Durability)
持久性是指一个事务一旦被提交了，那么对于数据库中的数据改变就是永久性的，
即便是在数据库系统遭遇到故障的情况下也不会丢失提交事务的操作。


如果没有隔离，会发生的几种问题
脏读（Dirty Read）
一个事务处理过程里读取了另一个未提交的事务中的数据

不可重复读（NonRepeatable Read）
对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，
这是由于在查询的间隔期间，另外一个事务修改并提交了该数据

幻读（Phantom Read）
在一个事务中读取到了别的事务插入的数据，导致前后不一致


查看当前事务的隔离级别
>select @@tx_isolation;

修改事务的隔离级别
>set  [global | session]  transaction isolation level 隔离级别名称;
>set tx_isolation=’隔离级别名称;

隔离级别：Serializable | Repeatable read | Read committed |
Read uncommitted
注意：
设置默认级别是指当前session的下一个事务
设置session级别是指当前session以后的所有事务
设置global级别是指对之后的所有session，不包括当前session


MySQL的锁类型

表锁
对一整张表加锁，并发能力低下（即使有分读锁、写锁），一般在DDL处理时使用

行锁
只锁住特定行的数据，并发能力强，MySQL一般都是用行锁来处理并发事务。

GAP锁（间隙锁）
是MySQL使用索引对行锁两边的区间进行加锁，避免其他事务在这两个区间insert的一种锁。

Next-Key锁
Next-Key锁是行锁和GAP锁的合并（MySQL使用它来避免幻读）

MVCC(多版本并发控制）
Innodb中的乐观锁实现。通过它提高MySQL的读取操作的性能。并能解决MySQL的重复读问题。
MVCC在每一行记录的后面加两个隐含列（记录创建版本号和删除版本号）。
这里的版本号指的是事务的版本号（每个事务启动的时候，都有一个递增的版本号）。

Innodb中事务隔离级别和锁的关系
Innodb通过使用不同的锁来实现事务隔离

避免脏读
通过对数据加行锁或则表锁，使对同一数据进行操作的事务处于等待状态，来避免同时操作

避免不可重复读
通过MVCC实现事务的可重复读

避免幻读
通过Next-Key锁避免产生幻读现象
MySQL在RC和RR中都避免了幻读现象。






数据库事务的隔离级别有4种，由低到高分别为Read uncommitted 、Read committed 、Repeatable read 、Serializable 。
而且，在事务的并发操作中可能会出现脏读，不可重复读，幻读。下面通过事例一一阐述它们的概念与联系。

Read uncommitted

读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。

事例：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，
但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。
但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。

分析：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。

那怎么解决脏读呢？Read committed！读提交，能解决脏读问题。

Read committed

读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。

事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，
就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。
程序员就会很郁闷，明明卡里是有钱的…

分析：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。
但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。

那怎么解决可能的不可重复读问题？Repeatable read ！

Repeatable read

重复读，就是在开始读取数据（事务开启）时，不再允许修改操作

事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。
这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。

分析：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。
因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作。

什么时候会出现幻读？

事例：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，
就在这个时候，程序员花了1万买了一部电脑，即新增INSERT了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。

那怎么解决幻读问题？Serializable！

Serializable 序列化

Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。

值得一提的是：大多数数据库默认的事务隔离级别是Read committed，比如Sql Server , Oracle。Mysql的默认隔离级别是Repeatable read。
